"""
Problem 12: https://projecteuler.net/problem=12
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
import math


def get_num_divisors(arg_num):
    """returns number of divsors for a given number"""
    num_divisors = 0
    # Note that this loop runs till square root
    i = 1
    while i <= math.sqrt(arg_num):
        if arg_num % i == 0:
            # If divisors are equal, print only one
            if arg_num / i == i:
                num_divisors += 1
            else:
                # Otherwise print both
                num_divisors += 2
        i = i + 1

    return num_divisors


def solve_problem12():
    """solve problem 12"""
    i = 0
    while True:
        triangle_sum = 0
        for k in range(1, i+1):
            triangle_sum += k
        if get_num_divisors(triangle_sum) >= 500:
            return triangle_sum
        i += 1


print("sum of all the primes below two million:", solve_problem12())
